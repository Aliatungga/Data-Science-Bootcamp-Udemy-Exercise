# -*- coding: utf-8 -*-
"""Data Prepocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mjnDPEtwSoa-ZwXuIslWhxwL8kIWlqtI
"""

import pandas as pd
import numpy as np

raw_csv_data = pd.read_csv('Absenteeism_data.csv')
raw_csv_data

"""# Pre Processing

## Duplicate dataset
"""

df = raw_csv_data.copy()
df

"""## column Max and Option raws"""

pd.options.display.max_columns = None
pd.options.display.max_rows = None
display(df)

df.info()

"""## Drop ID"""

df_data = df.drop(['ID'], axis = 1)
df_data.head()

df_no_age = df_data.drop(['Age'], axis = 1 )
df_no_age.head()

"""## Reason for **Absence**"""

df_data['Reason for Absence'].min()

df_data['Reason for Absence'].max()

df_data['Reason for Absence'].unique()

pd.unique(df_data['Reason for Absence'])

len((df_data['Reason for Absence']).unique())

sorted((df_data['Reason for Absence']).unique())

"""## get dummies"""

reason_columns = pd.get_dummies(df_data['Reason for Absence'])
reason_columns

reason_columns['check'] = reason_columns.sum(axis=1)
reason_columns

reason_columns['check'].sum(axis=0)

reason_columns['check'].unique()

reason_columns = reason_columns.drop(['check'],axis = 1)
reason_columns

age_dummies = pd.get_dummies(df['Age'])
age_dummies

reason_columns = pd.get_dummies(df_data['Reason for Absence'],drop_first = True)
reason_columns

"""## Group the reasons for absence"""

df_data.columns.values

reason_columns.columns.values

df = df_data.drop(['Reason for Absence'], axis = 1)
df

reason_columns.loc[:, 1:14]

reason_columns.loc[:, 1:14].max(axis=1)

reason_type_1 = reason_columns.loc[:, 1:14].max(axis=1)
reason_type_2 = reason_columns.loc[:, 15:17].max(axis=1)
reason_type_3 = reason_columns.loc[:, 18:21].max(axis=1)
reason_type_4 = reason_columns.loc[:, 22:].max(axis=1)

reason_type_1

"""## concatenate columns values"""

df.head()

df = pd.concat([df, reason_type_1,reason_type_2,reason_type_3,reason_type_4],axis=1)
df.head()

df.columns.values

columns_names = ['Date', 'Transportation Expense', 'Distance to Work', 'Age',
       'Daily Work Load Average', 'Body Mass Index', 'Education',
       'Children', 'Pets', 'Absenteeism Time in Hours', 'Reason_1','Reason_2','Reason_3','Reason_4']

df.columns = columns_names
df.head()

df_concatenated = pd.concat([df_no_age, age_dummies],axis=1)
df_concatenated.head()

"""## Reorder columns"""

columns_names_reordered = ['Reason_1','Reason_2','Reason_3','Reason_4','Date', 'Transportation Expense', 'Distance to Work', 'Age',
       'Daily Work Load Average', 'Body Mass Index', 'Education',
       'Children', 'Pets', 'Absenteeism Time in Hours']

df = df[columns_names_reordered]
df.head()

"""## check point"""

df_reason_mod = df.copy()
df_reason_mod.head()

"""## Date"""

type(df_reason_mod['Date'][0])

df_reason_mod['Date'] = pd.to_datetime(df_reason_mod['Date'])
df_reason_mod['Date'].head()

df_reason_mod['Date'] = pd.to_datetime(df_reason_mod['Date'], format = '%d%m%Y')
df_reason_mod['Date'].head()

type(df_reason_mod['Date'][0])

df_reason_mod.info()

"""## Extract the month value"""

df_reason_mod['Date'][0]

df_reason_mod['Date'][0].month

list_months = []
list_months

df_reason_mod.shape

for i in range (df_reason_mod.shape[0]):
    list_months.append(df_reason_mod['Date'][1].month)
list_months

len(list_months)

df_reason_mod['Month Value'] = list_months
df_reason_mod.head()

"""## Extract the day of the week"""

df_reason_mod['Date'][699].weekday()

df_reason_mod['Date'][699]

def date_to_weekday(date_value):
    return date_value.weekday()

df_reason_mod['Day of the week'] = df_reason_mod['Date'].apply(date_to_weekday)
df_reason_mod.head()

df_reason_date_mod = df_reason_mod.copy()

type(df_reason_date_mod['Transportation Expense'][0])

type(df_reason_date_mod['Distance to Work'][0])

df_reason_date_mod.info()

"""## Education"""

df_reason_date_mod['Education'].unique()

df_reason_date_mod['Education'].value_counts()

df_reason_date_mod['Education'] = df_reason_date_mod['Education'].map({1:0, 2:1, 3:1, 4:1})
df_reason_date_mod['Education'].unique()

df_reason_date_mod['Education'].value_counts()

"""## Final Checkpoint"""

data_preprocessed = df_reason_date_mod.copy()
data_preprocessed.head()

"""# Logistic Regression

## Targets
"""

data_preprocessed['Absenteeism Time in Hours'].median()

targets = np.where(data_preprocessed['Absenteeism Time in Hours'] >
                   data_preprocessed['Absenteeism Time in Hours'].median(),1,0)
targets

data_preprocessed['Excessive Absenteeism'] = targets
data_preprocessed.head()

"""## A comment on the targets"""

targets.sum() / targets.shape[0]

data_with_targets = data_preprocessed.drop(['Absenteeism Time in Hours'],axis=1)

data_with_targets is data_preprocessed

data_with_targets.head()

"""## Select the inputs for the regression"""

data_with_targets.shape

data_with_targets.iloc[:,:14]

data_with_targets.iloc[:,:-1]

unscaled_inputs = data_with_targets.iloc[:,:-1]

"""## Standardize the data"""